// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Schedule.database;

namespace Schedule.Database.Migrations
{
    [DbContext(typeof(SqlDatabase))]
    [Migration("20220501143706_InitialScheduleRelationships")]
    partial class InitialScheduleRelationships
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Schedule.Core.Entities.Account.User", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime>("ActivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("EmailToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmailTokenLifetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("GroupId")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Communication.Chat", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("OrganizerId")
                        .HasColumnType("VARBINARY(16)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Communication.Message", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("ChatId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("SenderId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Communication.UserChat", b =>
                {
                    b.Property<byte[]>("UserId")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("ChatId")
                        .HasColumnType("VARBINARY(16)");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChats");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Grade", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Comment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 5, 1, 14, 37, 6, 397, DateTimeKind.Utc).AddTicks(3513));

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("StudentId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("SubjectId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Group", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte>("Faculty")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Notification", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1);

                    b.Property<byte>("Type")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Subject", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.TeacherSubject", b =>
                {
                    b.Property<byte[]>("SubjectId")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("TeacherId")
                        .HasColumnType("VARBINARY(16)");

                    b.HasKey("SubjectId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.UserNotification", b =>
                {
                    b.Property<byte[]>("UsertId")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("NotificationId")
                        .HasColumnType("VARBINARY(16)");

                    b.HasKey("UsertId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.Appointment", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 5, 1, 14, 37, 6, 363, DateTimeKind.Utc).AddTicks(2769));

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("SubjectId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("TeacherId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.AppointmentGroup", b =>
                {
                    b.Property<byte[]>("GroupId")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("AppointmentId")
                        .HasColumnType("VARBINARY(16)");

                    b.HasKey("GroupId", "AppointmentId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentGroups");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.Assignment", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Grade")
                        .HasColumnType("float");

                    b.Property<byte[]>("GroupId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("SubjectId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("TeacherId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.Attachment", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("AssignmentId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("GradeId")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("OwnerId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("GradeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.File", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("AssignmentId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("AttachmentId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("UploaderId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("UploaderId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.Task", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Token.RefreshToken", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Account.User", b =>
                {
                    b.HasOne("Schedule.Core.Entities.General.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Communication.Chat", b =>
                {
                    b.HasOne("Schedule.Core.Entities.Account.User", "Organizer")
                        .WithMany("OrganizedChats")
                        .HasForeignKey("OrganizerId");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Communication.Message", b =>
                {
                    b.HasOne("Schedule.Core.Entities.Communication.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.Account.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Communication.UserChat", b =>
                {
                    b.HasOne("Schedule.Core.Entities.Communication.Chat", "Chat")
                        .WithMany("ParticipantChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.Account.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Grade", b =>
                {
                    b.HasOne("Schedule.Core.Entities.Account.User", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.General.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.TeacherSubject", b =>
                {
                    b.HasOne("Schedule.Core.Entities.General.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.Account.User", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.UserNotification", b =>
                {
                    b.HasOne("Schedule.Core.Entities.General.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.Account.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UsertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.Appointment", b =>
                {
                    b.HasOne("Schedule.Core.Entities.General.Subject", "Subject")
                        .WithMany("Appointments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.Account.User", "Teacher")
                        .WithMany("TeacherAppointments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.AppointmentGroup", b =>
                {
                    b.HasOne("Schedule.Core.Entities.Studying.Appointment", "Appointment")
                        .WithMany("AppointmentGroups")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.General.Group", "Group")
                        .WithMany("AppointmentGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.Assignment", b =>
                {
                    b.HasOne("Schedule.Core.Entities.General.Group", "Group")
                        .WithMany("Assignments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.General.Subject", "Subject")
                        .WithMany("Assignments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.Account.User", "Teacher")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.Attachment", b =>
                {
                    b.HasOne("Schedule.Core.Entities.Studying.Assignment", "Assignment")
                        .WithMany("Attachments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.General.Grade", "Grade")
                        .WithMany("Attachments")
                        .HasForeignKey("GradeId");

                    b.HasOne("Schedule.Core.Entities.Account.User", "Owner")
                        .WithMany("StudentAttachments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Grade");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.File", b =>
                {
                    b.HasOne("Schedule.Core.Entities.Studying.Assignment", "Assignment")
                        .WithMany("Files")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.Studying.Attachment", "Attachment")
                        .WithMany("Files")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.Account.User", "Uploader")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Attachment");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.Task", b =>
                {
                    b.HasOne("Schedule.Core.Entities.Studying.Appointment", "Appointment")
                        .WithOne("Task")
                        .HasForeignKey("Schedule.Core.Entities.Studying.Task", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Token.RefreshToken", b =>
                {
                    b.HasOne("Schedule.Core.Entities.Account.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("Schedule.Core.Entities.Token.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Account.User", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("OrganizedChats");

                    b.Navigation("SentMessages");

                    b.Navigation("StudentAttachments");

                    b.Navigation("TeacherAppointments");

                    b.Navigation("TeacherAssignments");

                    b.Navigation("TeacherSubjects");

                    b.Navigation("Token");

                    b.Navigation("UploadedFiles");

                    b.Navigation("UserChats");

                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Communication.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("ParticipantChats");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Grade", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Group", b =>
                {
                    b.Navigation("AppointmentGroups");

                    b.Navigation("Assignments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Subject", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Assignments");

                    b.Navigation("Grades");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.Appointment", b =>
                {
                    b.Navigation("AppointmentGroups");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.Assignment", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Studying.Attachment", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
