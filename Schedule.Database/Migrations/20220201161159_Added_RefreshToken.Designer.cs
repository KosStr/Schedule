// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Schedule.database;

namespace Schedule.Database.Migrations
{
    [DbContext(typeof(SqlDatabase))]
    [Migration("20220201161159_Added_RefreshToken")]
    partial class Added_RefreshToken
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Schedule.Core.Entities.Account.User", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<byte[]>("GroupId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<byte>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1);

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Group", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.GroupLessons", b =>
                {
                    b.Property<byte[]>("GroupId")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("LessonId")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GroupId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("GroupLessons");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.GroupNotifications", b =>
                {
                    b.Property<byte[]>("GroupId")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("NotificationId")
                        .HasColumnType("VARBINARY(16)");

                    b.HasKey("GroupId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("GroupNotifications");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Lesson", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<bool>("IsCompulsory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<byte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Mark", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("LessonId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("StudentId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Notification", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CreatedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("ModifiedBy")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.TeacherLessons", b =>
                {
                    b.Property<byte[]>("TeacherId")
                        .HasColumnType("VARBINARY(16)");

                    b.Property<byte[]>("LessonId")
                        .HasColumnType("VARBINARY(16)");

                    b.HasKey("TeacherId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("TeacherLessons");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Token.RefreshToken", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARBINARY(16)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("VARBINARY(16)");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Schedule.Core.Entities.Account.User", b =>
                {
                    b.HasOne("Schedule.Core.Entities.General.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.GroupLessons", b =>
                {
                    b.HasOne("Schedule.Core.Entities.General.Group", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.General.Lesson", "Lesson")
                        .WithMany("Groups")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.GroupNotifications", b =>
                {
                    b.HasOne("Schedule.Core.Entities.General.Group", "Group")
                        .WithMany("Notifications")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.General.Notification", "Notification")
                        .WithMany("Groups")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.Mark", b =>
                {
                    b.HasOne("Schedule.Core.Entities.General.Lesson", "Lesson")
                        .WithMany("Marks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.Account.User", "Student")
                        .WithMany("Marks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schedule.Core.Entities.General.TeacherLessons", b =>
                {
                    b.HasOne("Schedule.Core.Entities.General.Lesson", "Lesson")
                        .WithMany("Teachers")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Core.Entities.Account.User", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schedule.Core.Entities.Token.RefreshToken", b =>
                {
                    b.HasOne("Schedule.Core.Entities.Account.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("Schedule.Core.Entities.Token.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
